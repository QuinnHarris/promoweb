.item
  %table.block{ :id => "item-#{item.id}" }
    %thead
      %tr
        %th
          - unless @price_lock || purchase_lock
            = link_to(image_tag('remove.png') + "Remove", { :controller => '/order', :action => :item_remove, :id => item, :order_id => @order }, { :confirm => "Remove #{item.product.name}" })
          - unless purchase_lock
            = check_box :item_po, item.id, { :checked => true }
            Include in PO
          - if item.sample_requested
            .late
              SAMPLE REQ
          - elsif item.task_completed?(ArtExcludeItemTask)
            .late
              BLANK ITEM
        %th.head{ :colspan => "3" } Price (Invoice)
        %th.admin{ :colspan => "3" } Cost (Purchase Order)
        - if item.our_notes.blank?
          %th{ :colspan => "2" }
            %a{ :href => "javascript:show('notes-#{item.id}')" } Show Notes
      %tr
        %td Description
        %td Unit
        %td Fixed
        %td Total
        %td.admin Unit
        %td.admin Fixed
        %td.admin Total
        %td.admin Profit
        %td.admin Margin
    %tbody
      %tr.defined
        %td<
          %strong
            #{item.product.name} (M#{item.product.id}) - 
            = link_to "<em>#{item.product.supplier.name}: #{item.product.supplier_num}</em>", item.product.supplier_url
        = render :partial => 'order_item_entry_tail', :locals => { :object => item, :purchase_lock => purchase_lock, :null => false }
      %tr
        %td{ :colspan => 10 }

          .block.thumb
            - if item.product.product_images.empty?
              - thumb_path = item.product.image_path_relative('thumb')
            - else
              - thumb_path = item.active_images.first.image.url(:thumb)
            %a{ :href => url_for_product(item.product) }
              = image_tag(thumb_path, :alt => "#{item.product.name} Thumbnail")

          %dl.variants
            - names = item.product.property_group_names
            %dt
              - reset_cycle
              - for name in names
                %span{ :class => cycle('odd', 'even') }= name.capitalize
              %span{ :class => cycle('odd', 'even') } Quantity:
              %span{ :class => cycle('odd', 'even') } Imprint:
            %dd
              %ul#variants
                - for oiv in purchase_lock ? item.order_item_variants.find_all { |v| v.quantity != 0 } : OrderItemVariantMeta.fetch(item)
                  %li
                    - reset_cycle
                    - for name in names
                      %span{ :class => cycle('odd', 'even') }<
                      %a{ :href => '#', :onclick => "variant_change(this);" }= (oiv.variant && (p = oiv.variant.properties.to_a.find { |p| p.name == name })) ? p.value : 'Not Specified'
                    %span{ :class => cycle('odd', 'even') }<
                      = text_field_tag "OrderItemVariant-#{oiv.meta_id}-quantity", oiv.quantity, :class => 'num shipset', :readonly => @price_lock, :tabindex => item.id*2
                    %span{ :class => cycle('odd', 'even') }<
                      = text_field_tag "OrderItemVariant-#{oiv.meta_id}-imprint_colors", oiv.imprint_colors, :class => 'imprint', :readonly => (@price_lock || purchase_lock), :tabindex => item.id*2+1
      %tr.defined
        - if item.shipping_rates
          %td.shipping= render :partial => 'order_item_shipping', :locals => { :item => item }
        - else
          %td.shipping.pending Shipping Pending
        %td.num
        %td.num= text_field_tag "OrderItem-#{item.id}-shipping_price", item.shipping_price.to_s, :class => 'money null', :readonly => @price_lock
        %td.num ???
        %td.admin
        %td.num.admin= text_field_tag "OrderItem-#{item.id}-shipping_cost", item.shipping_cost.to_s, :class => 'money null', :readonly => purchase_lock
        %td.num.admin
        %td.num.admin
          = text_field_tag "profit-#{item.id}", "???", :class => 'money null profit', :readonly => @price_lock
        %td.num.admin
          = text_field_tag "margin-#{item.id}", "???", :class => 'money null margin', :readonly => @price_lock
        %td.admin
          \%

      - for decoration in item.decorations.find(:all, :include => [:technique, :decoration])
        %tr.defined
          = render :partial => 'order_item_decoration', :locals => { :entry => decoration, :purchase_lock => purchase_lock }
      - for entry in item.entries.find(:all, :order => 'id')
        %tr
          = render :partial => 'order_item_entry', :locals => { :entry => entry, :purchase_lock => purchase_lock }
    %tfoot
      %tr.total
        %td
          - unless @price_lock || purchase_lock
            %div
              = link_to_remote image_tag("add.png")+" Add General Entry", :complete => "entry_insert(request, 'item-#{item.id}', false)", :url => { :action => :order_item_entry_insert, :id => item.id, :unlock => @unlock }
            %div.add_dec
              %h4= image_tag("add.png") + " Add Decorations"
              - decors = [DecorationTechnique.find_by_name('General')] + item.product.decorations.collect { |d| d.technique.id != 1 ? d.technique : nil }.uniq.compact
              = decors.collect { |tech| link_to_remote tech.name, :complete => "entry_insert(request, 'item-#{item.id}', true)", :url => { :action => :order_item_decoration_insert, :id => item.id, :technique => tech.id } }.join(', ')
        %td.num ???
        %td.num ???
        %td.num ???
        %td.num.admin ???
        %td.num.admin ???
        %td.num.admin ???
        %td.num.admin ???
        %td.num.admin ???
      %tr.num
        %th Unit:
        %td
        %td ???
        %td ???
        %td
        %td.admin ???
        %td.admin ???
    %script= "merge_listing(#{item.normal_all_h.to_json})"
    - unless item.customer_notes.nil? or item.customer_notes.strip.empty?
      .notes.block
        %h3 Customer Notes
        %p= item.customer_notes
    .notes.block{ :id => "notes-#{item.id}", :class => item.our_notes.blank? ? 'hide' : '' }
      %h3 Common Notes
      = text_area_tag "OrderItem-#{item.id}-our_notes", item.our_notes, :class => 'null', :rows => [6, item.our_notes ? item.our_notes.split("\n").length : 0].max, :cols => 40