= render :partial => 'items_menu'
- last_art = Artwork.find(:first, :include => { :group => :customer }, :conditions => { 'customers.id' => @order.customer.id }, :order => 'artworks.created_at DESC')
- if last_art and last_art.has_tag?('customer')
  .late CUSTOMER UPLOADED ARTWORK
= link_to("Create Product", :controller => :products, :action => :new)
|
= link_to "Sample Order", { :action => :order_duplicate, :samples => true }, { :confirm => "Create new order with samples of current items" }
|
= link_to "FREE Sample Order", { :action => :order_duplicate, :samples => true, :free => true }, { :confirm => "Create new order with FREE samples of current items" }
- if true #acknowledged = @order.task_completed?(AcknowledgeOrderTask)
  |
  = link_to "ReOrder", { :action => :order_duplicate }, { :confirm => "Create new reorder current items" }
  |
  = link_to "Exact ReOrder", { :action => :order_duplicate, :exact => true }, { :confirm => "Create new reorder current items" }
- if @permissions.include?('Super') && !@unlock
  .admin
    The order has been Acknowledged so customer pricing can't be changed.
    = link_to "UNLOCK", { :order_id => @order.id, :unlock => true }, { :confirm => "Unlock this page to modify items even though the order has been acknowledged!!!" }
.invoice{ :id => "order-#{@order.id}" }
  - for supplier, purchase_list in @suppliers.to_a.sort_by { |s| s.first.id }
    .supplier
      %h2
        = link_to(supplier.name, { :controller => '/admin/suppliers', :action => :detail, :id => supplier })
        \:
        - unless supplier.web.blank?
          = link_to('Website', "http://#{supplier.web}")
        - if supplier.phone
          = format_phone(supplier.phone)
        - if supplier.fax
          FAX: #{format_phone(supplier.fax)}
          = mail_to(supplier.send_email(@order.sample))
      - for purchase in purchase_list.sort_by { |pl| (pl.id || 0) }
        .purchase
          - purchase_lock = !(params[:override] && allowed?('Super')) && purchase.locked(allowed?('Super'))
          - if purchase.new_record?
            = form_for @order, { :url => { :action => :purchase_create, :id => supplier.id, :order_id => @order } } do |order|
              %h2
                Purchase Order - Create as
                - for sub in [supplier] + supplier.children
                  = submit_tag("#{sub['name']}", :onclick => "return confirm('Are you sure you want to create a PO ?')")

              - for item in purchase.items
                = render :partial => 'order_item', :locals => { :item => item, :purchase_lock => purchase_lock }
          - else             
            %h2
              Purchase for
              = purchase.supplier.name
              - if purchase.purchase_order.quickbooks_ref
                (PO:
                = purchase.purchase_order.quickbooks_ref
                - if purchase.bill
                  Bill:
                  - if ReconciledItemTask.allowed?(@permissions) and !purchase.reconciled
                    = text_field_tag "Bill-#{purchase.bill.id}-quickbooks_ref", purchase.bill.quickbooks_ref, 'size' => 8, :readonly => purchase_lock
                  - else
                    = purchase.bill.quickbooks_ref                      
                )
                - if url = purchase.supplier_status_url
                  %a{ :href => url } Supplier Status
              %div
                = link_to image_tag('html.png'), :action => :po, :id => purchase
                = link_to image_tag('pdf.png'), :action => :po, :id => purchase, :format => 'pdf'
            
            - common_tasks = all_tasks = purchase.items.first.tasks_ready.collect { |t| t.class }
            - purchase.items.each { |i| t = i.tasks_ready.collect { |t| t.class }; common_tasks &= t; all_tasks |= t; }
            - common_tasks.each do |klass|
              = form_for @order, { :url => { :action => :purchase_mark, :id => purchase.id, :order_id => @order } } do |order|
                = hidden_field_tag(:class, klass.to_s)
                - case klass.to_s
                - when 'OrderSentItemTask'
                  = submit_tag "Send by #{purchase.fax? ? 'FAX' : 'eMail'} #{OrderSentItemTask.status_name}"
                  = submit_tag "Mark #{OrderSentItemTask.status_name} (Without email)"
                - when 'ConfirmItemTask', 'ReceivedItemTask', 'AcceptedItemTask', 'ReconciledItemTask'
                  - if klass.allowed?(@permissions)
                    = submit_tag klass.status_name
                    - if klass.instance_method_already_implemented?(:email_complete)
                      = submit_tag klass.status_name + ' (Without Email)'
                  - else
                    = klass.waiting_name
                - when 'EstimatedItemTask', 'ShipItemTask'
                  = klass.status_name
                  - if klass == EstimatedItemTask
                    = calendar_input('data[ship_date]', '', { :class => 'ignore' }, {}, "_#{purchase.id}")
                    Days Shipping:
                    = text_field(:data, :ship_days, { :size => 3, :value => purchase.items.first.shipping && purchase.items.first.shipping.days, :class => 'ignore' })
                    = check_box :data, :ship_saturday
                    Saturday Delivery
                  - else
                    = select(:data, :carrier, ShippingRate.carriers)
                    = text_field(:data, :tracking, { :size => 20, :class => 'ignore' })

                  = submit_tag 'Completed'
                  = submit_tag 'Completed (Without Email)'

            - if purchase.reconciled
              %strong= ReconciledItemTask.completed_name
            - unless (partial_tasks = (all_tasks - common_tasks)).empty?
              Partially Complete:
              = partial_tasks.collect { |t| t.status_name }.join(', ')

            - for item in purchase.items
              = render :partial => 'order_item', :locals => { :item => item, :purchase_lock => purchase_lock }
          - unless purchase.new_record?
            .notes
              %strong Notes for Supplier:
              = text_field_tag "Purchase-#{purchase.id}-comment", purchase.comment, :size => 80, :readonly => purchase_lock
            = render :partial => 'order', :locals => { :order => purchase, :purchase_lock => purchase_lock }
  = render :partial => 'order', :locals => { :order => @order, :purchase_lock => false }

- unless @tasks.empty? and @revokable.empty?
  %hr
  = render :partial => 'order/pending_tasks'

