- for group in artwork_groups
  - if group.nil?
    %hr
    - next
  - elsif group.is_a?(String)
    %h2= group
    - next
  .group{ :id => "artwork-group=#{group.id}" }
    %table.head
      %tr
        %td
          - if !static and @user
            = fields_for "group[#{group.id}]", group do |grp|
              = grp.text_field(:name, :size => 23)
              %br
              = grp.text_area(:description, :rows => 2, :cols => 30)

            - if @user and group.artworks.empty? and group.order_item_decorations.empty?
              %br
              = link_to(image_tag('remove.png') + "Remove", group_destroy_order_artwork_path(@order, :id => group), :method => :post, :confirm => "Remove Artwork Group}")   
          - else
            %h2= group.name
            %p= group.description
        %td
          = render :partial => '/orders/artwork_decoration', :locals => { :group => group, :item_decorations => group.decorations_for_order(@order), :static => static, :dragable => !static && dragable }

    .items
      - for artwork in group.artworks
        - next if filter_tag and !artwork.has_tag?(filter_tag)
        .item{ :id => "artwork=#{artwork.id}" }
          .thumb
            - if File.exists?(artwork.art.path(:thumb))
              %a{ :href => artwork.art.url }
                = image_tag artwork.art.url(:thumb)
            - else
              = image_tag 'nopreview.png'

          %table.form
            %tbody
              %tr
                %th Name:
                %td
                  %a{ :href => artwork.art.url }= artwork.art.original_filename
                %td{ :rowspan => "4", :style => "vertical-align: top;" }
                  - unless static
                    = link_to(image_tag('remove.png') + "Remove", order_artwork_path(@order, artwork), :method => :delete, :confirm => "Remove #{artwork['file']}")
                    - if @user and artwork.can_pdf?
                      %br
                      - if group.artworks.to_a.find { |a| a.art.original_filename == artwork.filename_pdf }
                        PDF Generated
                      - else
                        - if artwork.can_proof?(@order)                           
                          = link_to "Proof", make_proof_order_artwork_path(@order, :artwork_id => artwork), :method => :post, :confirm => "Generate Proof and mark this file as supplier and the proof as proof?"
                          = link_to "(Scale)", make_proof_order_artwork_path(@order, :artwork_id => artwork, :scale => true), :method => :post, :confirm => "Generate Proof and mark this file as supplier and the proof as proof?"
                    %hr
                  - complete = @order.tasks_dep.find_all { |t| t.active }
                  - tags = artwork.tags.collect { |t| t.name }
                  - for name, req in ArtworkTag.tag_mapping(artwork)
                    - if !static and req and !complete.include?(req)
                      %div
                        = link_to(mark_order_artwork_path(@order, artwork, :tag => name, :state => !tags.include?(name)), :method => :post) do
                          %span.checkbox
                            - if tags.include?(name)
                              = image_tag 'check.png'
                          = name.capitalize
                    - elsif (req and !static) or tags.include?(name)
                      %div
                        %span.checkbox
                          - if tags.include?(name)
                            = image_tag 'check.png'
                        = name.capitalize
              %tr
                %th Uploaded:
                %td= format_time(artwork.created_at)
              %tr
                %th Source:
                %td= "#{artwork.user ? artwork.user.name : 'Customer'} (#{artwork.host})"
              - if artwork.art.size
                %tr
                  %th Size:
                  %td
                    = artwork.art.size
                    bytes

          - fields_for "artwork[#{artwork.id}]", artwork do |art|
            - unless static and (!artwork.customer_notes or artwork.customer_notes.empty?)
              .block
                %h3 Notes
                = static ? artwork.customer_notes : art.text_area(:customer_notes, 'rows' => 3)

            - if @user
              /- unless static and (!artwork.our_notes or artwork.our_notes.empty?)
              /  .block.admin
              /    %h3 Our Notes
              /    = static ? artwork.our_notes : art.text_area(:our_notes, 'rows' => 3)
        - if @user and artwork_groups.length > 1
          = draggable_element("artwork=#{artwork.id}", :revert => "'failure'", :scroll => 'window')

  - if @user
    = drop_receiving_element("artwork-group=#{group.id}", { :onDrop => 'moveItem' } )